// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: acm.proto

<<<<<<< HEAD
/*
	Package acm is a generated protocol buffer package.

	It is generated from these files:
		acm.proto

	It has these top-level messages:
		Account
*/
package acm
=======
package acm // import "github.com/hyperledger/burrow/acm"
>>>>>>> implemented move, test move1

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
<<<<<<< HEAD
import permission "github.com/hyperledger/burrow/permission"
import crypto "github.com/hyperledger/burrow/crypto"
=======
import crypto "github.com/hyperledger/burrow/crypto"
import permission "github.com/hyperledger/burrow/permission"
>>>>>>> implemented move, test move1

import github_com_hyperledger_burrow_crypto "github.com/hyperledger/burrow/crypto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Account struct {
<<<<<<< HEAD
	Address     github_com_hyperledger_burrow_crypto.Address `protobuf:"bytes,1,opt,name=Address,proto3,customtype=github.com/hyperledger/burrow/crypto.Address" json:"Address"`
	PublicKey   crypto.PublicKey                             `protobuf:"bytes,2,opt,name=PublicKey" json:"PublicKey"`
	Sequence    uint64                                       `protobuf:"varint,3,opt,name=Sequence,proto3" json:"Sequence,omitempty"`
	Balance     uint64                                       `protobuf:"varint,4,opt,name=Balance,proto3" json:"Balance,omitempty"`
	Code        Bytecode                                     `protobuf:"bytes,5,opt,name=Code,proto3,customtype=Bytecode" json:"Code"`
	Permissions permission.AccountPermissions                `protobuf:"bytes,6,opt,name=Permissions" json:"Permissions"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptorAcm, []int{0} }
=======
	Address              github_com_hyperledger_burrow_crypto.Address `protobuf:"bytes,1,opt,name=Address,proto3,customtype=github.com/hyperledger/burrow/crypto.Address" json:"Address"`
	PublicKey            crypto.PublicKey                             `protobuf:"bytes,2,opt,name=PublicKey" json:"PublicKey"`
	Sequence             uint64                                       `protobuf:"varint,3,opt,name=Sequence,proto3" json:"Sequence,omitempty"`
	Balance              uint64                                       `protobuf:"varint,4,opt,name=Balance,proto3" json:"Balance,omitempty"`
	Code                 Bytecode                                     `protobuf:"bytes,5,opt,name=Code,proto3,customtype=Bytecode" json:"Code"`
	Permissions          permission.AccountPermissions                `protobuf:"bytes,6,opt,name=Permissions" json:"Permissions"`
	ShardID              uint64                                       `protobuf:"varint,7,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *Account) Reset()      { *m = Account{} }
func (*Account) ProtoMessage() {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_acm_c6f006adc87b451a, []int{0}
}
func (m *Account) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Account.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(dst, src)
}
func (m *Account) XXX_Size() int {
	return m.Size()
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo
>>>>>>> implemented move, test move1

func (m *Account) GetPublicKey() crypto.PublicKey {
	if m != nil {
		return m.PublicKey
	}
	return crypto.PublicKey{}
}

func (m *Account) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *Account) GetBalance() uint64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *Account) GetPermissions() permission.AccountPermissions {
	if m != nil {
		return m.Permissions
	}
	return permission.AccountPermissions{}
}

func (m *Account) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (*Account) XXX_MessageName() string {
	return "acm.Account"
}
func init() {
	proto.RegisterType((*Account)(nil), "acm.Account")
	golang_proto.RegisterType((*Account)(nil), "acm.Account")
}
func (m *Account) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Account) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAcm(dAtA, i, uint64(m.Address.Size()))
	n1, err := m.Address.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintAcm(dAtA, i, uint64(m.PublicKey.Size()))
	n2, err := m.PublicKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.Sequence != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAcm(dAtA, i, uint64(m.Sequence))
	}
	if m.Balance != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAcm(dAtA, i, uint64(m.Balance))
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintAcm(dAtA, i, uint64(m.Code.Size()))
	n3, err := m.Code.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x32
	i++
	i = encodeVarintAcm(dAtA, i, uint64(m.Permissions.Size()))
	n4, err := m.Permissions.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
<<<<<<< HEAD
=======
	if m.ShardID != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintAcm(dAtA, i, uint64(m.ShardID))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
>>>>>>> implemented move, test move1
	return i, nil
}

func encodeVarintAcm(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Account) Size() (n int) {
	var l int
	_ = l
	l = m.Address.Size()
	n += 1 + l + sovAcm(uint64(l))
	l = m.PublicKey.Size()
	n += 1 + l + sovAcm(uint64(l))
	if m.Sequence != 0 {
		n += 1 + sovAcm(uint64(m.Sequence))
	}
	if m.Balance != 0 {
		n += 1 + sovAcm(uint64(m.Balance))
	}
	l = m.Code.Size()
	n += 1 + l + sovAcm(uint64(l))
	l = m.Permissions.Size()
	n += 1 + l + sovAcm(uint64(l))
<<<<<<< HEAD
=======
	if m.ShardID != 0 {
		n += 1 + sovAcm(uint64(m.ShardID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
>>>>>>> implemented move, test move1
	return n
}

func sovAcm(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAcm(x uint64) (n int) {
	return sovAcm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Account) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAcm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Account: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Account: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAcm
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PublicKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			m.Balance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Balance |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAcm
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Code.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Permissions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAcm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAcm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAcm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAcm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAcm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAcm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAcm
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAcm
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAcm(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAcm = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAcm   = fmt.Errorf("proto: integer overflow")
)

<<<<<<< HEAD
func init() { proto.RegisterFile("acm.proto", fileDescriptorAcm) }
func init() { golang_proto.RegisterFile("acm.proto", fileDescriptorAcm) }

var fileDescriptorAcm = []byte{
	// 323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xbd, 0x4e, 0xfb, 0x30,
	0x14, 0xc5, 0xeb, 0x36, 0xff, 0x7e, 0xb8, 0x1d, 0xfa, 0xf7, 0x64, 0x75, 0x70, 0x0b, 0x62, 0xe8,
	0x00, 0x89, 0xc4, 0x87, 0x90, 0xd8, 0x1a, 0x24, 0x16, 0x24, 0x54, 0x85, 0x8d, 0x2d, 0x71, 0x2e,
	0x69, 0xa4, 0xa6, 0x0e, 0x4e, 0x2c, 0x94, 0x37, 0x61, 0xe4, 0x39, 0x98, 0x18, 0x3b, 0x32, 0x33,
	0x54, 0x28, 0x7d, 0x11, 0x54, 0xe3, 0x86, 0x4c, 0x6c, 0x3e, 0xfe, 0xdd, 0x73, 0xef, 0xd1, 0xc1,
	0x3d, 0x9f, 0x27, 0x76, 0x2a, 0x45, 0x2e, 0x48, 0xcb, 0xe7, 0xc9, 0xe8, 0x24, 0x8a, 0xf3, 0x85,
	0x0a, 0x6c, 0x2e, 0x12, 0x27, 0x12, 0x91, 0x70, 0x34, 0x0b, 0xd4, 0xa3, 0x56, 0x5a, 0xe8, 0xd7,
	0x8f, 0x67, 0x34, 0x4c, 0x41, 0x26, 0x71, 0x96, 0xc5, 0x62, 0x65, 0x7e, 0x06, 0x5c, 0x16, 0x69,
	0x6e, 0xf8, 0xe1, 0x5b, 0x13, 0x77, 0x66, 0x9c, 0x0b, 0xb5, 0xca, 0xc9, 0x1d, 0xee, 0xcc, 0xc2,
	0x50, 0x42, 0x96, 0x51, 0x34, 0x41, 0xd3, 0x81, 0x7b, 0xbe, 0xde, 0x8c, 0x1b, 0x9f, 0x9b, 0xf1,
	0x71, 0xed, 0xe6, 0xa2, 0x48, 0x41, 0x2e, 0x21, 0x8c, 0x40, 0x3a, 0x81, 0x92, 0x52, 0x3c, 0x3b,
	0x66, 0xa1, 0xf1, 0x7a, 0xfb, 0x25, 0xe4, 0x02, 0xf7, 0xe6, 0x2a, 0x58, 0xc6, 0xfc, 0x16, 0x0a,
	0xda, 0x9c, 0xa0, 0x69, 0xff, 0xf4, 0xbf, 0x6d, 0x86, 0x2b, 0xe0, 0x5a, 0xbb, 0x23, 0xde, 0xef,
	0x24, 0x19, 0xe1, 0xee, 0x3d, 0x3c, 0x29, 0x58, 0x71, 0xa0, 0xad, 0x09, 0x9a, 0x5a, 0x5e, 0xa5,
	0x09, 0xc5, 0x1d, 0xd7, 0x5f, 0xfa, 0x3b, 0x64, 0x69, 0xb4, 0x97, 0xe4, 0x08, 0x5b, 0xd7, 0x22,
	0x04, 0xfa, 0x4f, 0x27, 0x1f, 0x9a, 0xe4, 0x5d, 0xb7, 0xc8, 0x81, 0x8b, 0x10, 0x3c, 0x4d, 0xc9,
	0x0d, 0xee, 0xcf, 0xab, 0x42, 0x32, 0xda, 0xd6, 0xa1, 0x98, 0x5d, 0x2b, 0xc9, 0x94, 0x51, 0x9b,
	0x32, 0x09, 0xeb, 0xc6, 0x2b, 0xeb, 0xe5, 0x75, 0xdc, 0x70, 0x2f, 0xd7, 0x25, 0x43, 0x1f, 0x25,
	0x43, 0x5f, 0x25, 0x43, 0xef, 0x5b, 0x86, 0xd6, 0x5b, 0x86, 0x1e, 0x0e, 0xfe, 0x6e, 0xcb, 0xe7,
	0x49, 0xd0, 0xd6, 0xe5, 0x9f, 0x7d, 0x07, 0x00, 0x00, 0xff, 0xff, 0x10, 0xec, 0x45, 0x82, 0xdd,
	0x01, 0x00, 0x00,
=======
func init() { proto.RegisterFile("acm.proto", fileDescriptor_acm_c6f006adc87b451a) }
func init() { golang_proto.RegisterFile("acm.proto", fileDescriptor_acm_c6f006adc87b451a) }

var fileDescriptor_acm_c6f006adc87b451a = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xbf, 0x4e, 0xf3, 0x30,
	0x14, 0xc5, 0xeb, 0x36, 0x5f, 0xd3, 0xba, 0x1d, 0xfa, 0x79, 0xb2, 0x3a, 0xa4, 0x05, 0x31, 0x74,
	0x80, 0x44, 0xe2, 0x8f, 0x90, 0xd8, 0x1a, 0x10, 0x12, 0x42, 0x42, 0x55, 0xba, 0xb1, 0x25, 0xce,
	0x25, 0x8d, 0xd4, 0xd4, 0xc1, 0x89, 0x85, 0xf2, 0x26, 0x8c, 0x3c, 0x0a, 0x63, 0x47, 0x06, 0x26,
	0x86, 0x0a, 0xb5, 0x2f, 0x82, 0xea, 0xba, 0x21, 0x13, 0x5b, 0x4e, 0xce, 0x3d, 0xf7, 0xfe, 0x74,
	0x8c, 0xdb, 0x3e, 0x4b, 0xec, 0x54, 0xf0, 0x9c, 0x93, 0x86, 0xcf, 0x92, 0xfe, 0x49, 0x14, 0xe7,
	0x33, 0x19, 0xd8, 0x8c, 0x27, 0x4e, 0xc4, 0x23, 0xee, 0x28, 0x2f, 0x90, 0x4f, 0x4a, 0x29, 0xa1,
	0xbe, 0x76, 0x99, 0x7e, 0x2f, 0x05, 0x91, 0xc4, 0x59, 0x16, 0xf3, 0x85, 0xfe, 0xd3, 0x65, 0xa2,
	0x48, 0x73, 0xed, 0x1f, 0x7e, 0xd6, 0xb1, 0x39, 0x66, 0x8c, 0xcb, 0x45, 0x4e, 0x1e, 0xb0, 0x39,
	0x0e, 0x43, 0x01, 0x59, 0x46, 0xd1, 0x10, 0x8d, 0xba, 0xee, 0xf9, 0x72, 0x35, 0xa8, 0x7d, 0xad,
	0x06, 0xc7, 0x95, 0x9b, 0xb3, 0x22, 0x05, 0x31, 0x87, 0x30, 0x02, 0xe1, 0x04, 0x52, 0x08, 0xfe,
	0xe2, 0xe8, 0x85, 0x3a, 0xeb, 0xed, 0x97, 0x90, 0x0b, 0xdc, 0x9e, 0xc8, 0x60, 0x1e, 0xb3, 0x7b,
	0x28, 0x68, 0x7d, 0x88, 0x46, 0x9d, 0xd3, 0xff, 0xb6, 0x1e, 0x2e, 0x0d, 0xd7, 0xd8, 0x1e, 0xf1,
	0x7e, 0x27, 0x49, 0x1f, 0xb7, 0xa6, 0xf0, 0x2c, 0x61, 0xc1, 0x80, 0x36, 0x86, 0x68, 0x64, 0x78,
	0xa5, 0x26, 0x14, 0x9b, 0xae, 0x3f, 0xf7, 0xb7, 0x96, 0xa1, 0xac, 0xbd, 0x24, 0x47, 0xd8, 0xb8,
	0xe6, 0x21, 0xd0, 0x7f, 0x8a, 0xbc, 0xa7, 0xc9, 0x5b, 0x6e, 0x91, 0x03, 0xe3, 0x21, 0x78, 0xca,
	0x25, 0xb7, 0xb8, 0x33, 0x29, 0x0b, 0xc9, 0x68, 0x53, 0x41, 0x59, 0x76, 0xa5, 0x24, 0x5d, 0x46,
	0x65, 0x4a, 0x13, 0x56, 0x83, 0x5b, 0x8e, 0xe9, 0xcc, 0x17, 0xe1, 0xdd, 0x0d, 0x35, 0x77, 0x1c,
	0x5a, 0x5e, 0x19, 0xaf, 0x6f, 0x83, 0x9a, 0x7b, 0xb9, 0x5c, 0x5b, 0xe8, 0x63, 0x6d, 0xa1, 0xef,
	0xb5, 0x85, 0xde, 0x37, 0x16, 0x5a, 0x6e, 0x2c, 0xf4, 0x78, 0xf0, 0x77, 0x8f, 0x3e, 0x4b, 0x82,
	0xa6, 0x7a, 0x96, 0xb3, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x01, 0x8a, 0x89, 0xd0, 0xf7, 0x01,
	0x00, 0x00,
>>>>>>> implemented move, test move1
}
